import React, { useState } from 'react';
import { generateImage } from '../services/geminiService';
import { Loader } from '../components/ui/Loader';
import { Image } from 'lucide-react';

const aspectRatios = ['1:1', '16:9', '9:16', '4:3', '3:4'] as const;
type AspectRatio = typeof aspectRatios[number];

const ImageGeneration: React.FC = () => {
  const [prompt, setPrompt] = useState('');
  const [aspectRatio, setAspectRatio] = useState<AspectRatio>('1:1');
  const [generatedImage, setGeneratedImage] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!prompt.trim() || isLoading) return;

    setIsLoading(true);
    setError(null);
    setGeneratedImage(null);

    try {
      const images = await generateImage(prompt, aspectRatio);
      if (images && images.length > 0) {
        setGeneratedImage(images[0]);
      } else {
        setError("La génération d'image a échoué. Aucune image n'a été retournée.");
      }
    } catch (err) {
      setError("Une erreur est survenue lors de la génération de l'image. Veuillez réessayer.");
      console.error(err);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="max-w-3xl mx-auto">
      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label htmlFor="prompt" className="block text-sm font-medium text-light-subtle dark:text-dark-subtle mb-1">
            Prompt pour l'image
          </label>
          <textarea
            id="prompt"
            value={prompt}
            onChange={(e) => setPrompt(e.target.value)}
            placeholder="ex: Un paysage urbain futuriste au coucher du soleil, éclairage cinématographique"
            className="w-full p-3 rounded-lg bg-light-surface dark:bg-dark-surface border border-light-border dark:border-dark-border focus:ring-2 focus:ring-light-primary dark:focus:ring-dark-primary focus:outline-none"
            rows={3}
          />
        </div>
        <div>
          <label htmlFor="aspectRatio" className="block text-sm font-medium text-light-subtle dark:text-dark-subtle mb-1">
            Format d'image
          </label>
          <div className="grid grid-cols-5 gap-2">
            {aspectRatios.map((ratio) => (
              <button
                key={ratio}
                type="button"
                onClick={() => setAspectRatio(ratio)}
                className={`p-2 rounded-md transition-colors text-sm border ${
                  aspectRatio === ratio
                    ? 'bg-light-primary text-white border-light-primary dark:bg-dark-primary dark:border-dark-primary'
                    : 'bg-light-surface dark:bg-dark-surface border-light-border dark:border-dark-border hover:border-light-primary dark:hover:border-dark-primary'
                }`}
              >
                {ratio}
              </button>
            ))}
          </div>
        </div>
        <button
          type="submit"
          disabled={isLoading || !prompt.trim()}
          className="w-full flex justify-center py-3 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-light-primary hover:bg-light-primary-hover dark:bg-dark-primary dark:hover:bg-dark-primary-hover focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-light-primary dark:focus:ring-dark-primary disabled:opacity-50"
        >
          {isLoading ? 'Génération...' : "Générer l'image"}
        </button>
      </form>
      
      {error && <p className="text-red-500 text-center mt-4">{error}</p>}

      <div className="mt-8 flex justify-center items-center min-h-[300px] bg-light-surface dark:bg-dark-surface rounded-lg border border-dashed border-light-border dark:border-dark-border">
        {isLoading ? (
          <Loader text="Création de votre chef-d'œuvre..." />
        ) : generatedImage ? (
          <img
            src={`data:image/jpeg;base64,${generatedImage}`}
            alt="Generated by Jux"
            className="max-w-full max-h-[80vh] rounded-lg object-contain"
          />
        ) : (
          <div className="text-center text-light-subtle dark:text-dark-subtle p-8">
            <Image className="mx-auto h-12 w-12" />
            <p className="mt-2">Votre image générée apparaîtra ici.</p>
          </div>
        )}
      </div>
    </div>
  );
};

export default ImageGeneration;